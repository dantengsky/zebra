
localparam shuf_plstages = 2;
localparam ninbits = $clog2(ninputs);

integer i, rseed, curtime, inittime;

reg clk, rstb, en, restart, comp_w0, finish;

reg [`F_NBITS-1:0] v_in [ninputs-1:0];
reg [`F_NBITS-1:0] tau;
wire [`F_NBITS-1:0] w0 [ninbits-1:0];

wire f_wren;
wire p_wren;
wire [`F_NBITS-1:0] fp_data;

wire ready_pulse, w0_ready, w0_ready_pulse;
wire [1:0] ready_code;

// ringbuf to hold output from each round of sumcheck
localparam nhpoints = $clog2(ninputs) + 1;   // # of points in H(gamma(.))
wire buf_en = f_wren | p_wren;
wire [`F_NBITS-1:0] buf_data [nhpoints-1:0];
ringbuf_simple
   #( .nbits        (`F_NBITS)
    , .nwords       (nhpoints)
    ) ibuf
    ( .clk          (clk)
    , .rstb         (rstb)
    , .en           (buf_en)
    , .wren         (buf_en)
    , .d            (fp_data)
    , .q            ()
    , .q_all        (buf_data)
    );

// one layer of the prover
prover_layer
   #( .ngates           (ngates)
    , .ninputs          (ninputs)
    , .gates_fn         (gates_fn)
    , .gates_in0        (gates_in0)
    , .gates_in1        (gates_in1)
    , .shuf_plstages    (shuf_plstages)
    ) iprv
    ( .clk          (clk)
    , .rstb         (rstb)
    , .en           (en)
    , .restart      (restart)
    , .v_in         (v_in)
    , .tau          (tau)
    , .mux_sel      (0)
    , .f_wren       (f_wren)
    , .p_wren       (p_wren)
    , .fp_data      (fp_data)
    , .comp_w0      (comp_w0)
    , .tau_w0       (tau)
    , .w0           (w0)
    , .w0_ready_pulse (w0_ready_pulse)
    , .w0_ready     (w0_ready)
    , .ready_pulse  (ready_pulse)
    , .ready_code   (ready_code)
    );

localparam ngates_unshuf = 1 << ($clog2(ninputs) - 1);
localparam naddgates = (ninputs > ngates) ? ninputs : ngates;
initial begin
`ifdef SIMULATOR_IS_ICARUS
    $dumpfile("layergen.fst");
    $dumpvars;
`else
    $shm_open("layergen.shm");
    $shm_probe("ASCM");
`endif
    rseed = 1;
    randomize_tau();
    randomize_inputs();
    clk = 0;
    rstb = 0;
    en = 0;
    finish = 0;
    comp_w0 = 0;
    restart = 1;
    #1 rstb = 1;
    clk = 1;

    #3 $display("\nStarting sumcheck.");
    inittime = $time;
    curtime = $time;
    en = 1;
    restart = 1;
    #2 en = 0;
    restart = 0;
end

`ALWAYS_FF @(posedge clk) begin
    if (ready_pulse) begin
        $display("*** Round complete. elapsed cycles %d", ($time - curtime)/2);
        curtime = $time;
        randomize_tau();
        case (ready_code)
            2'b00, 2'b01: begin
                en <= 1;
                comp_w0 <= 0;
            end

            default: begin
                en <= 0;
                comp_w0 <= 1;
            end
        endcase
    end else begin
        en <= 0;
        comp_w0 <= 0;
    end

    if (w0_ready_pulse) begin
        $display("*********\nFinished %d sumcheck rounds in %d cycles.\n(%f mult equivs).\n*********", 2*ninbits + $clog2(ngates), ($time - inittime)/2, ($time - inittime)/14);
        #10 $finish;
    end
end

`ALWAYS_FF @(clk) begin
    clk <= #1 ~clk;
end

task randomize_inputs;
    integer i;
begin
    for (i = 0; i < ninputs; i = i + 1) begin
        randomize_single_value(v_in[i]);
    end
end
endtask

task randomize_tau;
begin
    randomize_single_value(tau);
end
endtask

task randomize_single_value;
    output [`F_NBITS-1:0] v;
begin
    v = $random(rseed);
    v = {v[31:0],32'b0} | $random(rseed);
end
endtask

endmodule
// vim: syntax=verilog_systemverilog
